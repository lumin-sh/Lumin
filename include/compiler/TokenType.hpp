
/*
 Copyright (C) 2025 Lumin Sh

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#ifndef TOKENTYPE_HPP
#define TOKENTYPE_HPP

#include <string>

namespace Lumin::Compiler {

enum class TokenType {
    // Keywords
    // Control Flow
    KEYWORD_IF, KEYWORD_THEN, KEYWORD_ELSE,
    KEYWORD_FOR, KEYWORD_IN, KEYWORD_WHILE,
    KEYWORD_TRY, KEYWORD_CATCH,
    KEYWORD_RETURN, KEYWORD_BREAK, KEYWORD_CONTINUE,
    KEYWORD_THROW, KEYWORD_MATCH,
    // Functions
    KEYWORD_FUN, KEYWORD_NATIVE, KEYWORD_ASYNC,
    // Variables
    KEYWORD_VAR, KEYWORD_VAL,
    // Types,
    KEYWORD_INT, KEYWORD_DOUBLE, KEYWORD_FLOAT,
    KEYWORD_LONG, KEYWORD_BOOL, KEYWORD_VOID,
    KEYWORD_CHAR, KEYWORD_STRING,
    // Structures
    KEYWORD_CLASS, KEYWORD_INTERFACE, KEYWORD_ENUM,
    KEYWORD_EXTENDS, KEYWORD_IMPLEMENTS, KEYWORD_TYPEALIAS,
    // Namespace
    KEYWORD_IMPORT, KEYWORD_NAMESPACE, KEYWORD_THIS,
    // Misc
    KEYWORD_IS, KEYWORD_AS,

    // Modifiers
    MODIFIER_PUBLIC, MODIFIER_PRIVATE, MODIFIER_INTERNAL,
    MODIFIER_ABSTRACT, MODIFIER_STATIC, MODIFIER_CONST,
    MODIFIER_OVERRIDE, MODIFIER_SYNCHRONIZED,
    MODIFIER_CONSTEXPR, MODIFIER_INLINE, MODIFIER_NOINLINE,

    // Literals
    LITERAL_IDENTIFIER,
    LITERAL_CHAR, LITERAL_STRING,
    LITERAL_INT, LITERAL_FLOAT, LITERAL_DOUBLE, LITERAL_LONG,
    LITERAL_BOOL, LITERAL_NULL,
    LITERAL_HEX, LITERAL_BINARY,

    // Operators
    // Arithmetic
    OPERATOR_PLUS, OPERATOR_MINUS, OPERATOR_MULTIPLY,
    OPERATOR_DIVIDE, OPERATOR_MODULO,
    OPERATOR_INCREMENT, OPERATOR_DECREMENT,
    // Assignment
    OPERATOR_ASSIGN,
    OPERATOR_PLUS_EQ, OPERATOR_MINUS_EQ,
    OPERATOR_MULTIPLY_EQ, OPERATOR_DIVIDE_EQ, OPERATOR_MODULO_EQ,
    // Comparison
    OPERATOR_EQUALS, OPERATOR_NOT_EQUAL,
    OPERATOR_GREATER_THAN, OPERATOR_LESS_THAN,
    OPERATOR_GREATER_EQUALS, OPERATOR_LESS_EQUALS,
    OPERATOR_BANG_EQUALS,
    // Logical
    OPERATOR_LOGICAL_AND, OPERATOR_LOGICAL_OR,
    OPERATOR_BANG,
    // Bitwise
    OPERATOR_BITWISE_AND, OPERATOR_BITWISE_INC_OR,
    OPERATOR_BITWISE_EXC_OR,
    OPERATOR_LEFT_SHIFT, OPERATOR_RIGHT_SHIFT,
    OPERATOR_UNSIGNED_RIGHT_SHIFT, OPERATOR_BITWISE_NEGATE,
    // Other
    OPERATOR_ARROW, OPERATOR_ELSENULL, OPERATOR_RANGE,
    OPERATOR_REFERENCE, OPERATOR_TEMPLATE, OPERATOR_ACCESS,
    OPERATOR_NULLABILITY,


    // Punctuation
    PUNCTUATION_LPAREN, PUNCTUATION_RPAREN,
    PUNCTUATION_LBRACE, PUNCTUATION_RBRACE,
    PUNCTUATION_LBRACKET, PUNCTUATION_RBRACKET,
    PUNCTUATION_SEMICOLON, PUNCTUATION_COMMA,
    PUNCTUATION_COLON, PUNCTUATION_DOT,
    PUNCTUATION_EXCLAMATION, PUNCTUATION_UNDERSCORE,
    PUNCTUATION_DOLLAR,

    // Special
    SPECIAL_END, SPECIAL_ERROR
};

struct Token {
    TokenType type;
    std::string lexeme;

    size_t line = 0;
    size_t column = 0;
};

}

#endif //TOKENTYPE_HPP
